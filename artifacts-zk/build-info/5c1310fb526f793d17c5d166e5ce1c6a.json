{"id":"5c1310fb526f793d17c5d166e5ce1c6a","_format":"hh-sol-build-info-1","solcVersion":"0.8.8","solcLongVersion":"0.8.8+commit.dddeac2f","input":{"language":"Solidity","sources":{"contracts/Demo.sol":{"content":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.8;\r\n\r\ncontract Demo {\r\n    string private greeting;\r\n    uint256 public num;\r\n\r\n    constructor(string memory _greeting) {\r\n        greeting = _greeting;\r\n    }\r\n\r\n    function greet() public view returns (string memory) {\r\n        return greeting;\r\n    }\r\n\r\n    function setGreeting(string memory _greeting) public {\r\n        greeting = _greeting;\r\n    }\r\n\r\n    function incNum()public {\r\n        num ++;\r\n    }\r\n}"}},"settings":{"optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[],"version":"0.8.8","long_version":"0.8.8+commit.dddeac2f.Windows.msvc","zk_version":"1.3.8","sources":{"contracts/Demo.sol":{"id":0,"ast":{"nodeType":"SourceUnit","name":null,"src":"38:436:0","memberName":null,"functionName":null,"AST":null,"nodes":[{"nodeType":"PragmaDirective","name":null,"src":"38:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ContractDefinition","name":"Demo","src":"65:409:0","memberName":null,"functionName":null,"AST":null,"nodes":[{"nodeType":"VariableDeclaration","name":"greeting","src":"86:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"num","src":"116:18:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"","src":"143:76:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"180:39:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"191:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"191:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"greeting","src":"191:8:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_greeting","src":"202:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"greet","src":"227:87:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"280:34:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"Return","name":null,"src":"291:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"greeting","src":"298:8:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"setGreeting","src":"322:92:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"375:39:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"386:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"386:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"greeting","src":"386:8:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_greeting","src":"397:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"incNum","src":"422:49:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"446:25:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"457:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"UnaryOperation","name":null,"src":"457:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":{"nodeType":"Identifier","name":"num","src":"457:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}}},"contracts":{"contracts/Demo.sol":{"Demo":{"abi":[{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greet","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"incNum","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"num","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"name\":\"setGreeting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Demo.sol\":\"Demo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Demo.sol\":{\"keccak256\":\"0x1dfbda705e58be62932ecd51ac57ad8c9e5336b6d834cf045ead68161d4001a6\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://c95e943e84c22d16b3b95861b9ffefc3d3ed6eb9408e9caff517c88622f3f826\",\"dweb:/ipfs/QmdruEGR42NpJ7YgiNykKh52LsnbUPKicwUW91Y2PRyK2z\"]}},\"version\":1}","zk_version":"1.3.8"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Demo.sol:Demo\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@calldatasize]\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_1\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.gt\t@.BB0_27\n\tsub.s!\t@CPI0_9[0], r1, r2\n\tjump.eq\t@.BB0_29\n\tsub.s!\t@CPI0_10[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t0, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_11[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r2\n\tadd\t31, r2, r3\n\tsub.s\t32, r0, r1\n\tand\tr3, r1, r5\n\tld.1\t64, r3\n\tadd\tr5, r3, r4\n\tsub!\tr4, r5, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_1[0], r4, r6\n\tjump.gt\t@.BB0_5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_5\n\tst.1\t64, r4\n\tand\t31, r2, r4\n\tptr.add\tstack[@ptr_calldata], r0, r5\n\tshr.s!\t5, r2, r6\n\tjump.eq\t@.BB0_40\n\tadd\tr0, r0, r7\n.BB0_8:\n\tshl.s\t5, r7, r8\n\tadd\tr3, r8, r9\n\tptr.add\tr5, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_8\n.BB0_40:\n\tsub.s!\t0, r4, r7\n\tjump.eq\t@.BB0_10\n\tshl.s\t5, r6, r6\n\tptr.add\tr5, r6, r5\n\tadd\tr3, r6, r6\n\tshl.s\t3, r4, r4\n\tld.1\tr6, r7\n\tshl\tr7, r4, r7\n\tshr\tr7, r4, r7\n\tld\tr5, r5\n\tsub\t256, r4, r4\n\tshr\tr5, r4, r5\n\tshl\tr5, r4, r4\n\tor\tr4, r7, r4\n\tst.1\tr6, r4\n.BB0_10:\n\tadd\t@CPI0_2[0], r0, r4\n\tsub.s!\t32, r2, r5\n\tadd\t0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI0_2[0], r2, r6\n\tsub.s!\t0, r6, r7\n\tadd.le\t0, r0, r4\n\tsub.s!\t@CPI0_2[0], r6, r6\n\tadd.ne\tr5, r0, r4\n\tsub.s!\t0, r4, r4\n\tjump.ne\t@.BB0_2\n\tld.1\tr3, r5\n\tsub.s!\t@CPI0_1[0], r5, r4\n\tjump.gt\t@.BB0_2\n\tadd\tr3, r2, r4\n\tadd\tr5, r3, r2\n\tadd\t31, r2, r3\n\tadd\t@CPI0_2[0], r0, r5\n\tsub!\tr3, r4, r6\n\tadd\t0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_2[0], r3, r3\n\tand\t@CPI0_2[0], r4, r7\n\tsub!\tr3, r7, r8\n\tadd.ge\t0, r0, r5\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI0_2[0], r3, r3\n\tadd\tr6, r0, r3\n\tadd.eq\tr5, r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.ne\t@.BB0_2\n\tld.1\tr2, r3\n\tsub.s!\t@CPI0_1[0], r3, r5\n\tjump.gt\t@.BB0_5\n\tadd\t63, r3, r5\n\tand\tr5, r1, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_1[0], r5, r7\n\tjump.gt\t@.BB0_5\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_5\n\tst.1\t64, r5\n\tst.1\tr1, r3\n\tadd\t32, r3, r5\n\tadd\tr5, r2, r6\n\tsub!\tr6, r4, r4\n\tjump.gt\t@.BB0_2\n\tsub.s!\t0, r3, r4\n\tjump.eq\t@.BB0_22\n\tadd\tr0, r0, r4\n.BB0_19:\n\tadd\t32, r4, r4\n\tadd\tr4, r1, r6\n\tadd\tr4, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tsub!\tr4, r3, r6\n\tjump.lt\t@.BB0_19\n\tsub!\tr4, r3, r2\n\tjump.le\t@.BB0_22\n\tadd\tr5, r1, r2\n\tst.1\tr2, r0\n.BB0_22:\n\tnear_call\tr0, @copy_byte_array_to_storage_from_string_to_string, @DEFAULT_UNWIND\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_3[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_5:\n\tadd\t@CPI0_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_27:\n\tsub.s!\t@CPI0_7[0], r1, r2\n\tjump.eq\t@.BB0_35\n\tsub.s!\t@CPI0_8[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t0, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @copy_array_from_storage_to_memory_string, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_29:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t0, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @fun_incNum, @DEFAULT_UNWIND\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_35:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tnear_call\tr0, @copy_byte_array_to_storage_from_string_to_string.6, @DEFAULT_UNWIND\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\ncopy_byte_array_to_storage_from_string_to_string:\n.func_begin1:\n\tnop\tstack+=[4]\n\tld.1.inc\tr1, r4, r6\n\tsub.s!\t@CPI1_0[0], r4, r2\n\tjump.ge\t@.BB1_1\n\tsload\tr0, r3\n\tand!\t1, r3, r2\n\tshr.s\t1, r3, r5\n\tand\t127, r5, r3\n\tadd.eq\tr3, r0, r5\n\tsub.s!\t31, r5, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tand\t1, r3, r3\n\tsub!\tr2, r3, r2\n\tjump.ne\t@.BB1_3\n\tadd\tr1, r0, stack-[3]\n\tsub.s!\t32, r5, r1\n\tadd\tr4, r0, stack-[4]\n\tjump.lt\t@.BB1_10\n\tadd\tr5, r0, stack-[1]\n\tadd\tr6, r0, stack-[2]\n\tst.1\t0, r0\n\tadd\t@CPI1_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI1_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_6\n\tadd\tstack-[4], r0, r4\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r4, r3\n\tadd.lt\t0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[2], r0, r6\n\tjump.ge\t@.BB1_10\n.BB1_9:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB1_9\n.BB1_10:\n\tsub.s!\t31, r4, r1\n\tjump.le\t@.BB1_19\n\tst.1\t0, r0\n\tadd\t@CPI1_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_1[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI1_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_6\n\tsub.s\t32, r0, r2\n\tadd\tstack-[4], r0, r6\n\tand!\tr6, r2, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tadd\tstack-[3], r0, r7\n\tjump.eq\t@.BB1_16\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB1_15:\n\tadd\tr2, r7, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_15\n.BB1_16:\n\tsub!\tr3, r6, r3\n\tjump.ge\t@.BB1_18\n\tshl.s\t3, r6, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r7, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB1_18:\n\tshl.s\t1, r6, r1\n\tor\t1, r1, r1\n\tjump\t@.BB1_11\n.BB1_19:\n\tsub.s!\t0, r4, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB1_11\n\tshl.s\t3, r4, r1\n\tsub.s\t1, r0, r2\n\tshr\tr2, r1, r1\n\txor\tr1, r2, r1\n\tld.1\tr6, r2\n\tand\tr2, r1, r1\n\tshl.s\t1, r4, r2\n\tor\tr1, r2, r1\n.BB1_11:\n\tsstore\tr0, r1\n\tret\n.BB1_1:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_3:\n\tadd\t@CPI1_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_6:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_decode_string:\n.func_begin2:\n\tsub.s\t4, r1, r2\n\tadd\t@CPI2_0[0], r0, r3\n\tsub.s!\t31, r2, r4\n\tadd\t0, r0, r4\n\tadd.gt\tr3, r0, r4\n\tand\t@CPI2_0[0], r2, r2\n\tsub.s!\t0, r2, r5\n\tadd.ge\t0, r0, r3\n\tsub.s!\t@CPI2_0[0], r2, r2\n\tadd\tr4, r0, r2\n\tadd.eq\tr3, r0, r2\n\tsub.s!\t0, r2, r2\n\tjump.eq\t@.BB2_1\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tptr.add.s\t4, r2, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI2_1[0], r5, r3\n\tjump.gt\t@.BB2_1\n\tadd\t35, r5, r3\n\tadd\t@CPI2_0[0], r0, r4\n\tsub!\tr3, r1, r6\n\tadd\t0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI2_0[0], r1, r7\n\tand\t@CPI2_0[0], r3, r3\n\tsub!\tr3, r7, r8\n\tadd.ge\t0, r0, r4\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI2_0[0], r3, r3\n\tadd\tr6, r0, r3\n\tadd.eq\tr4, r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.ne\t@.BB2_1\n\tadd\t4, r5, r3\n\tptr.add\tr2, r3, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI2_2[0], r3, r2\n\tjump.ge\t@.BB2_5\n\tadd\t63, r3, r2\n\tsub.s\t32, r0, r4\n\tand\tr2, r4, r4\n\tld.1\t64, r2\n\tadd\tr2, r4, r4\n\tsub!\tr4, r2, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI2_1[0], r4, r7\n\tjump.gt\t@.BB2_5\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB2_5\n\tst.1\t64, r4\n\tst.1.inc\tr2, r3, r4\n\tadd\t36, r5, r5\n\tadd\tr5, r3, r6\n\tsub!\tr6, r1, r1\n\tjump.gt\t@.BB2_1\n\tand\t31, r3, r1\n\tptr.add\tstack[@ptr_calldata], r5, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB2_14\n\tadd\tr0, r0, r7\n.BB2_11:\n\tshl.s\t5, r7, r8\n\tadd\tr4, r8, r9\n\tptr.add\tr5, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB2_11\n.BB2_14:\n\tsub.s!\t0, r1, r7\n\tjump.eq\t@.BB2_13\n\tshl.s\t5, r6, r6\n\tptr.add\tr5, r6, r5\n\tadd\tr4, r6, r6\n\tshl.s\t3, r1, r1\n\tld.1\tr6, r7\n\tshl\tr7, r1, r7\n\tshr\tr7, r1, r7\n\tld\tr5, r5\n\tsub\t256, r1, r1\n\tshr\tr5, r1, r5\n\tshl\tr5, r1, r1\n\tor\tr1, r7, r1\n\tst.1\tr6, r1\n.BB2_13:\n\tadd\tr4, r3, r1\n\tst.1\tr1, r0\n\tadd\tr2, r0, r1\n\tret\n.BB2_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_5:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nabi_encode_string:\n.func_begin3:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tsub.s!\t0, r3, r4\n\tadd\t64, r1, r1\n\tjump.eq\t@.BB3_4\n\tadd\tr0, r0, r4\n.BB3_2:\n\tadd\tr1, r4, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB3_2\n\tsub!\tr4, r3, r2\n\tjump.le\t@.BB3_4\n\tadd\tr1, r3, r2\n\tst.1\tr2, r0\n\tjump\t@.BB3_6\n.BB3_4:\n.BB3_6:\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end3:\n\ncopy_array_from_storage_to_memory_string:\n.func_begin4:\n\tsload\tr0, r4\n\tand!\t1, r4, r5\n\tshr.s\t1, r4, r1\n\tand\t127, r1, r2\n\tadd.ne\tr1, r0, r2\n\tsub.s!\t31, r2, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr5, r1, r1\n\tjump.ne\t@.BB4_1\n\tld.1\t64, r1\n\tst.1.inc\tr1, r2, r3\n\tsub.s!\t0, r5, r5\n\tjump.eq\t@.BB4_7\n\tst.1\t0, r0\n\tsub.s!\t0, r2, r4\n\tadd\tr0, r0, r4\n\tjump.eq\t@.BB4_11\n\tadd\t@CPI4_0[0], r0, r5\n\tadd\tr0, r0, r4\n.BB4_10:\n\tadd\tr3, r4, r6\n\tsload\tr5, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r6\n\tjump.lt\t@.BB4_10\n.BB4_11:\n\tadd\tr3, r4, r2\n\tjump\t@.BB4_3\n.BB4_7:\n\tsub.s\t256, r0, r2\n\tand\tr4, r2, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r2\n.BB4_3:\n\tsub\tr2, r1, r2\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r3\n\tadd\tr3, r1, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI4_1[0], r2, r4\n\tjump.gt\t@.BB4_5\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB4_5\n\tst.1\t64, r2\n\tret\n.BB4_1:\n\tadd\t@CPI4_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_5:\n\tadd\t@CPI4_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\ncopy_byte_array_to_storage_from_string_to_string.6:\n.func_begin5:\n\tld.1.inc\tr1, r2, r3\n\tsub.s!\t@CPI5_0[0], r2, r4\n\tjump.ge\t@.BB5_1\n\tsload\tr0, r4\n\tand!\t1, r4, r5\n\tshr.s\t1, r4, r4\n\tand\t127, r4, r6\n\tadd.eq\tr6, r0, r4\n\tsub.s!\t31, r4, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\tand\t1, r6, r6\n\tsub!\tr5, r6, r5\n\tjump.ne\t@.BB5_3\n\tsub.s!\t32, r4, r5\n\tjump.lt\t@.BB5_8\n\tadd\t31, r2, r5\n\tshr.s\t5, r5, r5\n\tadd\t@CPI5_1[0], r5, r5\n\tadd\t@CPI5_1[0], r0, r6\n\tsub.s!\t32, r2, r7\n\tadd.lt\tr6, r0, r5\n\tst.1\t0, r0\n\tadd\t31, r4, r4\n\tshr.s\t5, r4, r4\n\tadd\t@CPI5_1[0], r4, r4\n\tsub!\tr5, r4, r6\n\tjump.ge\t@.BB5_8\n.BB5_7:\n\tsstore\tr5, r0\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB5_7\n.BB5_8:\n\tsub.s!\t31, r2, r4\n\tjump.le\t@.BB5_16\n\tsub.s\t32, r0, r3\n\tand!\tr2, r3, r5\n\tadd\t@CPI5_1[0], r0, r3\n\tadd\t32, r0, r4\n\tst.1\t0, r0\n\tjump.eq\t@.BB5_13\n\tadd\t32, r0, r4\n\tadd\t@CPI5_1[0], r0, r3\n\tadd\tr0, r0, r6\n.BB5_12:\n\tadd\tr4, r1, r7\n\tld.1\tr7, r7\n\tsstore\tr3, r7\n\tadd\t32, r4, r4\n\tadd\t1, r3, r3\n\tadd\t32, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB5_12\n.BB5_13:\n\tsub!\tr5, r2, r5\n\tjump.ge\t@.BB5_15\n\tshl.s\t3, r2, r5\n\tand\t248, r5, r5\n\tsub.s\t1, r0, r6\n\tshr\tr6, r5, r5\n\txor\tr5, r6, r5\n\tadd\tr4, r1, r1\n\tld.1\tr1, r1\n\tand\tr1, r5, r1\n\tsstore\tr3, r1\n.BB5_15:\n\tshl.s\t1, r2, r1\n\tor\t1, r1, r1\n\tjump\t@.BB5_9\n.BB5_16:\n\tsub.s!\t0, r2, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB5_9\n\tshl.s\t3, r2, r1\n\tsub.s\t1, r0, r4\n\tshr\tr4, r1, r1\n\txor\tr1, r4, r1\n\tld.1\tr3, r3\n\tand\tr3, r1, r1\n\tshl.s\t1, r2, r2\n\tor\tr1, r2, r1\n.BB5_9:\n\tsstore\tr0, r1\n\tret\n.BB5_1:\n\tadd\t@CPI5_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_3:\n\tadd\t@CPI5_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\nfun_incNum:\n.func_begin6:\n\tadd\t1, r0, r1\n\tsload\tr1, r2\n\tsub.s\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.eq\t@.BB6_1\n\tadd\t1, r2, r2\n\tsstore\tr1, r2\n\tret\n.BB6_1:\n\tadd\t@CPI6_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI6_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\n__staticcall:\n.func_begin7:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB7_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB7_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end7:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_1:\n\t.cell 4294967295\nCPI0_1:\nCPI2_1:\nCPI4_1:\n\t.cell 18446744073709551615\nCPI0_2:\nCPI2_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_3:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_4:\nCPI1_3:\nCPI2_3:\nCPI4_2:\nCPI5_2:\nCPI6_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_5:\nCPI1_4:\nCPI2_4:\nCPI4_3:\nCPI5_3:\nCPI6_1:\n\t.cell 2852213850513516153367582212096\nCPI0_6:\n\t.cell 2752735329\nCPI0_7:\n\t.cell 2752735330\nCPI0_8:\n\t.cell 3484299799\nCPI0_9:\n\t.cell 1303718349\nCPI0_10:\n\t.cell 1316008412\nCPI0_11:\n\t.cell 2535301200456458802993406410752\nCPI1_0:\nCPI2_2:\nCPI5_0:\n\t.cell 18446744073709551616\nCPI1_2:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI4_0:\nCPI5_1:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\n","bytecode":{"object":""},"methodIdentifiers":{"greet()":"cfae3217","incNum()":"4db529cd","num()":"4e70b1dc","setGreeting(string)":"a4136862"}},"irOptimized":"/*=====================================================*\n *                       WARNING                       *\n *  Solidity to Yul compilation is still EXPERIMENTAL  *\n *       It can result in LOSS OF FUNDS or worse       *\n *                !USE AT YOUR OWN RISK!               *\n *=====================================================*/\n\n/// @use-src 0:\"contracts/Demo.sol\"\nobject \"Demo_41\" {\n    code {\n        {\n            /// @src 0:65:474  \"contract Demo {...\"\n            mstore(64, 128)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"Demo_41\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            let _2 := 32\n            if slt(sub(_1, memoryDataOffset), _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:65:474  \"contract Demo {...\"\n            let offset := mload(memoryDataOffset)\n            let _3 := sub(shl(64, 1), 1)\n            if gt(offset, _3)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:65:474  \"contract Demo {...\"\n            let _4 := add(memoryDataOffset, offset)\n            if iszero(slt(add(_4, 0x1f), _1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:65:474  \"contract Demo {...\"\n            let _5 := mload(_4)\n            if gt(_5, _3) { panic_error_0x41() }\n            let array := allocate_memory(add(and(add(_5, 0x1f), not(31)), _2))\n            mstore(array, _5)\n            if gt(add(add(_4, _5), _2), _1)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:65:474  \"contract Demo {...\"\n            let i := /** @src -1:-1:-1 */ 0\n            /// @src 0:65:474  \"contract Demo {...\"\n            for { } lt(i, _5) { i := add(i, _2) }\n            {\n                mstore(add(add(array, i), _2), mload(add(add(_4, i), _2)))\n            }\n            if gt(i, _5)\n            {\n                mstore(add(add(array, _5), _2), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 0:65:474  \"contract Demo {...\"\n            copy_byte_array_to_storage_from_string_to_string(array)\n            let _6 := mload(64)\n            let _7 := datasize(\"Demo_41_deployed\")\n            codecopy(_6, dataoffset(\"Demo_41_deployed\"), _7)\n            return(_6, _7)\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function array_dataslot_string_storage() -> data\n        {\n            mstore(/** @src 0:191:211  \"greeting = _greeting\" */ 0x00, 0x00)\n            /// @src 0:65:474  \"contract Demo {...\"\n            data := keccak256(/** @src 0:191:211  \"greeting = _greeting\" */ 0x00, /** @src 0:65:474  \"contract Demo {...\" */ 0x20)\n        }\n        function clean_up_bytearray_end_slots_string_storage(len, startIndex)\n        {\n            let array := /** @src 0:191:211  \"greeting = _greeting\" */ 0x00\n            /// @src 0:65:474  \"contract Demo {...\"\n            if gt(len, 31)\n            {\n                mstore(/** @src 0:191:211  \"greeting = _greeting\" */ array, array)\n                /// @src 0:65:474  \"contract Demo {...\"\n                let data := keccak256(/** @src 0:191:211  \"greeting = _greeting\" */ array, /** @src 0:65:474  \"contract Demo {...\" */ 0x20)\n                let deleteStart := add(data, shr(5, add(startIndex, 31)))\n                if lt(startIndex, 0x20) { deleteStart := data }\n                let _1 := add(data, shr(5, add(len, 31)))\n                let start := deleteStart\n                for { } lt(start, _1) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src 0:191:211  \"greeting = _greeting\" */ array)\n                }\n            }\n        }\n        /// @src 0:65:474  \"contract Demo {...\"\n        function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n        {\n            used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n        }\n        function copy_byte_array_to_storage_from_string_to_string(src)\n        {\n            let newLen := mload(src)\n            if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            /// @src 0:191:211  \"greeting = _greeting\"\n            let _1 := 0x00\n            /// @src 0:65:474  \"contract Demo {...\"\n            clean_up_bytearray_end_slots_string_storage(extract_byte_array_length(sload(/** @src 0:191:211  \"greeting = _greeting\" */ _1)), /** @src 0:65:474  \"contract Demo {...\" */ newLen)\n            let srcOffset := /** @src 0:191:211  \"greeting = _greeting\" */ _1\n            /// @src 0:65:474  \"contract Demo {...\"\n            let srcOffset_1 := 0x20\n            srcOffset := srcOffset_1\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                let dstPtr := array_dataslot_string_storage()\n                let i := /** @src 0:191:211  \"greeting = _greeting\" */ _1\n                /// @src 0:65:474  \"contract Demo {...\"\n                for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n                {\n                    sstore(dstPtr, mload(add(src, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, srcOffset_1)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(src, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src 0:191:211  \"greeting = _greeting\" */ _1, /** @src 0:65:474  \"contract Demo {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := /** @src 0:191:211  \"greeting = _greeting\" */ _1\n                /// @src 0:65:474  \"contract Demo {...\"\n                if newLen\n                {\n                    value := mload(add(src, srcOffset))\n                }\n                sstore(/** @src 0:191:211  \"greeting = _greeting\" */ _1, /** @src 0:65:474  \"contract Demo {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n            }\n        }\n    }\n    /// @use-src 0:\"contracts/Demo.sol\"\n    object \"Demo_41_deployed\" {\n        code {\n            {\n                /// @src 0:65:474  \"contract Demo {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _1 := 0\n                    switch shr(224, calldataload(_1))\n                    case 0x4db529cd {\n                        if callvalue() { revert(_1, _1) }\n                        abi_decode(calldatasize())\n                        fun_incNum()\n                        return(mload(64), _1)\n                    }\n                    case 0x4e70b1dc {\n                        if callvalue() { revert(_1, _1) }\n                        abi_decode(calldatasize())\n                        let ret := sload(/** @src 0:116:134  \"uint256 public num\" */ 1)\n                        /// @src 0:65:474  \"contract Demo {...\"\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_uint256(memPos, ret), memPos))\n                    }\n                    case 0xa4136862 {\n                        if callvalue() { revert(_1, _1) }\n                        copy_byte_array_to_storage_from_string_to_string(abi_decode_string(calldatasize()))\n                        return(mload(64), _1)\n                    }\n                    case 0xcfae3217 {\n                        if callvalue() { revert(_1, _1) }\n                        abi_decode(calldatasize())\n                        let converted := copy_array_from_storage_to_memory_string()\n                        let memPos_1 := mload(64)\n                        return(memPos_1, sub(abi_encode_string(memPos_1, converted), memPos_1))\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode(dataEnd)\n            {\n                if slt(add(dataEnd, not(3)), 0) { revert(0, 0) }\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_string(dataEnd) -> value0\n            {\n                if slt(add(dataEnd, not(3)), 32) { revert(0, 0) }\n                let offset := calldataload(4)\n                let _1 := 0xffffffffffffffff\n                if gt(offset, _1) { revert(0, 0) }\n                if iszero(slt(add(offset, 35), dataEnd))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:65:474  \"contract Demo {...\"\n                let _2 := calldataload(add(4, offset))\n                if gt(_2, _1) { panic_error_0x41() }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_2, 0x1f), not(31)), 32))\n                mstore(memPtr, _2)\n                if gt(add(add(offset, _2), 36), dataEnd)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:65:474  \"contract Demo {...\"\n                calldatacopy(add(memPtr, 32), add(offset, 36), _2)\n                mstore(add(add(memPtr, _2), 32), /** @src -1:-1:-1 */ 0)\n                /// @src 0:65:474  \"contract Demo {...\"\n                value0 := memPtr\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, _1)\n                let length := mload(value0)\n                mstore(add(headStart, _1), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                if gt(i, length)\n                {\n                    mstore(add(add(headStart, length), 64), 0)\n                }\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function array_dataslot_string_storage() -> data\n            {\n                mstore(0, 0)\n                data := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n            }\n            function copy_array_from_storage_to_memory_string() -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := 0\n                let slotValue := sload(ret)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, _2)\n                case 0 {\n                    mstore(add(memPtr, _1), and(slotValue, not(255)))\n                    ret := add(memPtr, 64)\n                }\n                case 1 {\n                    mstore(0, 0)\n                    let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(memPtr, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(memPtr, i), _1)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function clean_up_bytearray_end_slots_string_storage(len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let _1 := 0\n                    mstore(_1, _1)\n                    let _2 := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                    let deleteStart := add(_2, shr(5, add(startIndex, 31)))\n                    if lt(startIndex, 0x20) { deleteStart := _2 }\n                    let _3 := add(_2, shr(5, add(len, 31)))\n                    let start := deleteStart\n                    for { } lt(start, _3) { start := add(start, 1) }\n                    { sstore(start, _1) }\n                }\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n            }\n            function copy_byte_array_to_storage_from_string_to_string(src)\n            {\n                let newLen := mload(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let _1 := 0\n                clean_up_bytearray_end_slots_string_storage(extract_byte_array_length(sload(_1)), newLen)\n                let srcOffset := _1\n                let srcOffset_1 := 0x20\n                srcOffset := srcOffset_1\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(31))\n                    let dstPtr := array_dataslot_string_storage()\n                    let i := _1\n                    for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, srcOffset_1)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                    }\n                    sstore(_1, add(shl(1, newLen), 1))\n                }\n                default {\n                    let value := _1\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(_1, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            /// @ast-id 40 @src 0:422:471  \"function incNum()public {...\"\n            function fun_incNum()\n            {\n                /// @src 0:65:474  \"contract Demo {...\"\n                let _1 := sload(/** @src 0:457:463  \"num ++\" */ 0x01)\n                /// @src 0:65:474  \"contract Demo {...\"\n                if eq(_1, not(0))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:65:474  \"contract Demo {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:65:474  \"contract Demo {...\" */ 0x24)\n                }\n                sstore(/** @src 0:457:463  \"num ++\" */ 0x01, /** @src 0:65:474  \"contract Demo {...\" */ add(_1, /** @src 0:457:463  \"num ++\" */ 0x01))\n            }\n        }\n        data \".metadata\" hex\"a364697066735822122045d04c3db74191372e58703ac90c5da234bcfdc4e85d57649b47e87f930f5a886c6578706572696d656e74616cf564736f6c63430008080041\"\n    }\n}\n","hash":"010000b5fd7a446d7027794154e6596f0ade57c88bdff8620c1d32f2afdb555b","factoryDependencies":{}}}}}}